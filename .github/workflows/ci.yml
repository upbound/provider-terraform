name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.19'
  GOLANGCI_VERSION: 'v1.50.0'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  UPBOUND_CI_ROBOT_USR: ${{ secrets.UPBOUND_CI_ROBOT_USR }}
  UPBOUND_BOT_GITHUB_TOKEN: ${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}
jobs:
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint:
    runs-on: ubuntu-22.04
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.noop != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-
      
      # git needs to be able to access private repositories under upbound.
      - name: Login to Github
        run: |
          git config --global user.name "upbound-bot"
          echo "machine github.com login upbound-bot password $UPBOUND_BOT_GITHUB_TOKEN" > ~/.netrc

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' to ensure our desired Go version, but we
      # prefer this action because it leaves 'annotations' (i.e. it comments
      # on PRs to point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          working-directory: ${{ matrix.providers }}
          args: --timeout 10m0s

  check-diff:
    runs-on: ubuntu-22.04
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.noop != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-check-diff-
      
      # git needs to be able to access private repositories under upbound.
      - name: Login to Github
        run: |
          git config --global user.name "upbound-bot"
          echo "machine github.com login upbound-bot password $UPBOUND_BOT_GITHUB_TOKEN" > ~/.netrc

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-22.04
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.noop != 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-unit-tests-
      
      # git needs to be able to access private repositories under upbound.
      - name: Login to Github
        run: |
          git config --global user.name "upbound-bot"
          echo "machine github.com login upbound-bot password $UPBOUND_BOT_GITHUB_TOKEN" > ~/.netrc

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: ./_output/tests/linux_amd64/coverage.txt

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.noop != 'true' }}

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(make go.cachedir)"
          echo "::set-output name=go-mod::$(make go.mod.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-build-e2e-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-e2e-tests-
      
      # git needs to be able to access private repositories under upbound.
      - name: Login to Github
        run: |
          git config --global user.name "upbound-bot"
          echo "machine github.com login upbound-bot password $UPBOUND_BOT_GITHUB_TOKEN" > ~/.netrc

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
      
      # NOTE(hasheddan): this will load the package into the Docker daemon, but
      # we will likely need to setup a step to apply a tag to the image in order
      # for it to be used in e2e tests when they are added.
      - name: Load Packages
        run: make xpkg.load

      - name: Run E2E Tests
        run: make e2e USE_HELM3=true

  check-examples:
    runs-on: ubuntu-22.04
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.noop != 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Check Example Manifests
        run: |
          ./scripts/check-examples.py package/crds examples
